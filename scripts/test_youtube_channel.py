#!/usr/bin/env python3
"""
Script de test pour diagnostiquer les probl√®mes d'API YouTube sur une cha√Æne sp√©cifique
Teste diff√©rents param√®tres et configurations pour comprendre pourquoi certaines cha√Ænes retournent peu de r√©sultats
"""

import json
from datetime import datetime
from pathlib import Path

import requests

# ============= CONFIGURATION =============
CHANNEL_ID = "UCa8b7nZo-iPKoJxspOplnWg"  # Rap Nation (√† modifier)
CHANNEL_NAME = "Rap Nation"  # Nom pour les logs (√† modifier)
API_KEY = (
    "AIzaSyBfVwwp5sszvbk7-1YL1kfIThgAJk6qhKw"  # Votre cl√© API YouTube (√† modifier)
)

# URL de base YouTube API v3
BASE_URL = "https://www.googleapis.com/youtube/v3"


def test_api_connection():
    """Test basique de connexion √† l'API"""
    print("üîç Test de connexion API...")

    try:
        response = requests.get(
            f"{BASE_URL}/channels",
            params={"part": "snippet,statistics", "id": CHANNEL_ID, "key": API_KEY},
            timeout=30,
        )

        if response.status_code == 200:
            data = response.json()
            if data.get("items"):
                channel = data["items"][0]
                stats = channel.get("statistics", {})
                print(f"‚úÖ Cha√Æne trouv√©e: {channel['snippet']['title']}")
                print(f"üìä Abonn√©s: {stats.get('subscriberCount', 'N/A')}")
                print(f"üé• Vid√©os: {stats.get('videoCount', 'N/A')}")
                print(f"üëÅÔ∏è Vues totales: {stats.get('viewCount', 'N/A')}")
                return True
            else:
                print("‚ùå Cha√Æne introuvable avec cet ID")
                return False
        else:
            print(f"‚ùå Erreur API: {response.status_code} - {response.text}")
            return False

    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return False


def test_search_variations():
    """Teste diff√©rentes variations de recherche"""
    print(f"\nüß™ Test de variations de recherche pour {CHANNEL_NAME}...")

    variations = [
        {
            "name": "Standard (date, 50 r√©sultats)",
            "params": {
                "part": "snippet",
                "channelId": CHANNEL_ID,
                "type": "video",
                "order": "date",
                "maxResults": 50,
            },
        },
        {
            "name": "Par pertinence (50 r√©sultats)",
            "params": {
                "part": "snippet",
                "channelId": CHANNEL_ID,
                "type": "video",
                "order": "relevance",
                "maxResults": 50,
            },
        },
        {
            "name": "Par popularit√© (50 r√©sultats)",
            "params": {
                "part": "snippet",
                "channelId": CHANNEL_ID,
                "type": "video",
                "order": "viewCount",
                "maxResults": 50,
            },
        },
        {
            "name": "Moins de r√©sultats (10)",
            "params": {
                "part": "snippet",
                "channelId": CHANNEL_ID,
                "type": "video",
                "order": "date",
                "maxResults": 10,
            },
        },
        {
            "name": "Avec query g√©n√©rique",
            "params": {
                "part": "snippet",
                "channelId": CHANNEL_ID,
                "type": "video",
                "q": "music",
                "order": "date",
                "maxResults": 50,
            },
        },
        {
            "name": "Sans filtre type",
            "params": {
                "part": "snippet",
                "channelId": CHANNEL_ID,
                "order": "date",
                "maxResults": 50,
            },
        },
    ]

    results = {}

    for variation in variations:
        print(f"\n  üìã Test: {variation['name']}")

        try:
            params = variation["params"].copy()
            params["key"] = API_KEY

            response = requests.get(f"{BASE_URL}/search", params=params, timeout=30)

            if response.status_code == 200:
                data = response.json()
                total = data.get("pageInfo", {}).get("totalResults", 0)
                returned = len(data.get("items", []))

                print(f"    ‚úÖ Total disponible: {total}")
                print(f"    üì¶ Retourn√©s: {returned}")

                if returned > 0:
                    # Montrer quelques titres
                    titles = [item["snippet"]["title"] for item in data["items"][:3]]
                    print(f"    üé¨ Exemples: {', '.join(titles[:2])}...")

                results[variation["name"]] = {
                    "success": True,
                    "total_results": total,
                    "returned_count": returned,
                    "sample_titles": [
                        item["snippet"]["title"] for item in data["items"][:5]
                    ],
                }

            elif response.status_code == 403:
                print(f"    üö´ Quota √©puis√© ou cl√© invalide")
                results[variation["name"]] = {"success": False, "error": "Quota/Auth"}
            else:
                print(f"    ‚ùå Erreur: {response.status_code}")
                results[variation["name"]] = {
                    "success": False,
                    "error": f"HTTP {response.status_code}",
                }

        except Exception as e:
            print(f"    üí• Exception: {e}")
            results[variation["name"]] = {"success": False, "error": str(e)}

    return results


def test_uploads_playlist():
    """Teste la playlist 'uploads' de la cha√Æne"""
    print(f"\nüì∫ Test via playlist uploads...")

    try:
        # D'abord r√©cup√©rer l'ID de la playlist uploads
        response = requests.get(
            f"{BASE_URL}/channels",
            params={"part": "contentDetails", "id": CHANNEL_ID, "key": API_KEY},
            timeout=30,
        )

        if response.status_code == 200:
            data = response.json()
            if data.get("items"):
                uploads_playlist_id = data["items"][0]["contentDetails"][
                    "relatedPlaylists"
                ]["uploads"]
                print(f"  üìã Playlist uploads ID: {uploads_playlist_id}")

                # R√©cup√©rer les vid√©os de la playlist
                playlist_response = requests.get(
                    f"{BASE_URL}/playlistItems",
                    params={
                        "part": "snippet",
                        "playlistId": uploads_playlist_id,
                        "maxResults": 50,
                        "key": API_KEY,
                    },
                    timeout=30,
                )

                if playlist_response.status_code == 200:
                    playlist_data = playlist_response.json()
                    total = playlist_data.get("pageInfo", {}).get("totalResults", 0)
                    returned = len(playlist_data.get("items", []))

                    print(f"  ‚úÖ Vid√©os via playlist: {returned}/{total}")

                    if returned > 0:
                        titles = [
                            item["snippet"]["title"]
                            for item in playlist_data["items"][:3]
                        ]
                        print(f"  üé¨ Exemples: {', '.join(titles)}")

                    return {
                        "success": True,
                        "total_results": total,
                        "returned_count": returned,
                        "method": "uploads_playlist",
                    }
                else:
                    print(f"  ‚ùå Erreur playlist: {playlist_response.status_code}")
            else:
                print("  ‚ùå Impossible de r√©cup√©rer les d√©tails de la cha√Æne")
        else:
            print(f"  ‚ùå Erreur channel: {response.status_code}")

    except Exception as e:
        print(f"  üí• Exception: {e}")

    return {"success": False, "error": "Playlist method failed"}


def test_quota_status():
    """Test simple pour v√©rifier le statut des quotas"""
    print(f"\n‚ö° Test de statut des quotas...")

    try:
        # Requ√™te tr√®s simple qui consomme peu de quota
        response = requests.get(
            f"{BASE_URL}/channels",
            params={"part": "id", "id": CHANNEL_ID, "key": API_KEY},
            timeout=10,
        )

        if response.status_code == 200:
            print("  ‚úÖ Quotas OK")
            return True
        elif response.status_code == 403:
            error_data = (
                response.json()
                if response.headers.get("content-type", "").startswith(
                    "application/json"
                )
                else {}
            )
            error_reason = (
                error_data.get("error", {})
                .get("errors", [{}])[0]
                .get("reason", "unknown")
            )
            print(f"  üö´ Quota/Auth error: {error_reason}")
            return False
        else:
            print(f"  ‚ö†Ô∏è Status inhabituel: {response.status_code}")
            return False

    except Exception as e:
        print(f"  üí• Exception: {e}")
        return False


def save_diagnostic_report(results):
    """Sauvegarde un rapport de diagnostic"""
    report = {
        "timestamp": datetime.now().isoformat(),
        "channel_id": CHANNEL_ID,
        "channel_name": CHANNEL_NAME,
        "api_key_used": (
            API_KEY[:10] + "..."
            if API_KEY != "YOUR_YOUTUBE_API_KEY_HERE"
            else "NOT_SET"
        ),
        "test_results": results,
    }

    # Cr√©er le dossier reports s'il n'existe pas
    reports_dir = Path(__file__).parent.parent / "reports"
    reports_dir.mkdir(exist_ok=True)

    # Nom de fichier avec timestamp
    filename = f"youtube_diagnostic_{CHANNEL_NAME.lower().replace(' ', '_')}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    filepath = reports_dir / filename

    with open(filepath, "w", encoding="utf-8") as f:
        json.dump(report, f, indent=2, ensure_ascii=False)

    print(f"\nüíæ Rapport sauvegard√©: {filepath}")


def main():
    """Fonction principale"""
    print("=" * 60)
    print("üöÄ DIAGNOSTIC YOUTUBE API")
    print("=" * 60)
    print(f"üéØ Cha√Æne cible: {CHANNEL_NAME}")
    print(f"üîë Channel ID: {CHANNEL_ID}")
    print(
        f"üóùÔ∏è API Key: {'‚úÖ Configur√©e' if API_KEY != 'YOUR_YOUTUBE_API_KEY_HERE' else '‚ùå √Ä configurer'}"
    )

    if API_KEY == "YOUR_YOUTUBE_API_KEY_HERE":
        print(
            "\n‚ùå ERREUR: Vous devez configurer votre cl√© API YouTube dans le script !"
        )
        print("   Modifiez la variable API_KEY au d√©but du fichier.")
        return

    all_results = {}

    # Test 1: Connexion de base
    if test_api_connection():
        all_results["api_connection"] = {"success": True}
    else:
        all_results["api_connection"] = {"success": False}
        print("\n‚ö†Ô∏è Connexion API √©chou√©e, arr√™t des tests")
        return

    # Test 2: Statut des quotas
    quota_ok = test_quota_status()
    all_results["quota_status"] = {"success": quota_ok}

    if not quota_ok:
        print("\n‚ö†Ô∏è Probl√®me de quota d√©tect√©, les tests suivants peuvent √©chouer")

    # Test 3: Variations de recherche
    search_results = test_search_variations()
    all_results["search_variations"] = search_results

    # Test 4: M√©thode playlist uploads
    playlist_result = test_uploads_playlist()
    all_results["uploads_playlist"] = playlist_result

    # Analyse finale
    print("\n" + "=" * 60)
    print("üìä ANALYSE FINALE")
    print("=" * 60)

    successful_methods = []
    for method, result in search_results.items():
        if result.get("success") and result.get("returned_count", 0) > 1:
            successful_methods.append((method, result["returned_count"]))

    if successful_methods:
        print("‚úÖ M√©thodes qui fonctionnent:")
        for method, count in sorted(
            successful_methods, key=lambda x: x[1], reverse=True
        ):
            print(f"   ‚Ä¢ {method}: {count} vid√©os")
    else:
        print("‚ùå Aucune m√©thode ne retourne beaucoup de r√©sultats")

    if playlist_result.get("success"):
        print(f"‚úÖ M√©thode playlist: {playlist_result.get('returned_count', 0)} vid√©os")

    # Recommandations
    print("\nüí° RECOMMANDATIONS:")
    if not quota_ok:
        print("   1. V√©rifier la cl√© API et les quotas YouTube")

    if any(
        r.get("total_results", 0) > r.get("returned_count", 0)
        for r in search_results.values()
    ):
        print("   2. Impl√©menter la pagination pour r√©cup√©rer plus de r√©sultats")

    best_method = max(
        search_results.items(),
        key=lambda x: x[1].get("returned_count", 0) if x[1].get("success") else 0,
    )
    if best_method[1].get("success"):
        print(
            f"   3. Utiliser la m√©thode '{best_method[0]}' qui donne le plus de r√©sultats"
        )

    # Sauvegarder le rapport
    save_diagnostic_report(all_results)


if __name__ == "__main__":
    main()
