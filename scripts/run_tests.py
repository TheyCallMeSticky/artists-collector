#!/usr/bin/env python3
"""
Script pour ex√©cuter tous les tests du projet Artists Collector
"""

import os
import sys
import subprocess
from pathlib import Path

# Ajouter le r√©pertoire parent au path
sys.path.append(str(Path(__file__).parent.parent))

def run_tests():
    """Ex√©cuter tous les tests"""
    print("üß™ Ex√©cution des tests Artists Collector")
    print("=" * 50)
    
    # Installer pytest si n√©cessaire
    try:
        import pytest
    except ImportError:
        print("üì¶ Installation de pytest...")
        subprocess.run([sys.executable, "-m", "pip", "install", "pytest", "pytest-cov"], check=True)
    
    # Changer vers le r√©pertoire du projet
    project_root = Path(__file__).parent.parent
    os.chdir(project_root)
    
    # Commande pytest avec couverture
    cmd = [
        sys.executable, "-m", "pytest",
        "tests/",
        "-v",
        "--tb=short",
        "--cov=app",
        "--cov-report=term-missing",
        "--cov-report=html:htmlcov"
    ]
    
    try:
        result = subprocess.run(cmd, check=False)
        
        if result.returncode == 0:
            print("\n‚úÖ Tous les tests sont pass√©s!")
            print("üìä Rapport de couverture g√©n√©r√© dans htmlcov/")
        else:
            print(f"\n‚ùå Certains tests ont √©chou√© (code de retour: {result.returncode})")
            
        return result.returncode
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'ex√©cution des tests: {e}")
        return 1

def run_linting():
    """Ex√©cuter les v√©rifications de style de code"""
    print("\nüîç V√©rification du style de code")
    print("=" * 50)
    
    # Installer les outils de linting si n√©cessaire
    try:
        subprocess.run([sys.executable, "-m", "pip", "install", "flake8", "black", "isort"], 
                      check=True, capture_output=True)
    except subprocess.CalledProcessError:
        print("‚ö†Ô∏è  Impossible d'installer les outils de linting")
        return 1
    
    project_root = Path(__file__).parent.parent
    os.chdir(project_root)
    
    # V√©rifier avec flake8
    print("üîç V√©rification avec flake8...")
    try:
        result = subprocess.run([
            sys.executable, "-m", "flake8", 
            "app/", "tests/",
            "--max-line-length=100",
            "--ignore=E203,W503"
        ], check=False, capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ Aucun probl√®me de style d√©tect√©")
        else:
            print("‚ö†Ô∏è  Probl√®mes de style d√©tect√©s:")
            print(result.stdout)
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification flake8: {e}")
    
    # V√©rifier le formatage avec black
    print("\nüîç V√©rification du formatage avec black...")
    try:
        result = subprocess.run([
            sys.executable, "-m", "black", 
            "--check", "--diff",
            "app/", "tests/"
        ], check=False, capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ Code correctement format√©")
        else:
            print("‚ö†Ô∏è  Code n√©cessite un reformatage:")
            print(result.stdout)
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification black: {e}")
    
    # V√©rifier les imports avec isort
    print("\nüîç V√©rification des imports avec isort...")
    try:
        result = subprocess.run([
            sys.executable, "-m", "isort", 
            "--check-only", "--diff",
            "app/", "tests/"
        ], check=False, capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ Imports correctement organis√©s")
        else:
            print("‚ö†Ô∏è  Imports n√©cessitent une r√©organisation:")
            print(result.stdout)
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification isort: {e}")

def run_security_check():
    """Ex√©cuter les v√©rifications de s√©curit√©"""
    print("\nüîí V√©rification de s√©curit√©")
    print("=" * 50)
    
    try:
        subprocess.run([sys.executable, "-m", "pip", "install", "bandit"], 
                      check=True, capture_output=True)
    except subprocess.CalledProcessError:
        print("‚ö†Ô∏è  Impossible d'installer bandit")
        return
    
    project_root = Path(__file__).parent.parent
    os.chdir(project_root)
    
    try:
        result = subprocess.run([
            sys.executable, "-m", "bandit", 
            "-r", "app/",
            "-f", "txt"
        ], check=False, capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ Aucun probl√®me de s√©curit√© d√©tect√©")
        else:
            print("‚ö†Ô∏è  Probl√®mes de s√©curit√© potentiels:")
            print(result.stdout)
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification de s√©curit√©: {e}")

def main():
    """Fonction principale"""
    import argparse
    
    parser = argparse.ArgumentParser(description="Ex√©cuter les tests et v√©rifications")
    parser.add_argument("--tests-only", action="store_true", 
                       help="Ex√©cuter seulement les tests")
    parser.add_argument("--lint-only", action="store_true", 
                       help="Ex√©cuter seulement le linting")
    parser.add_argument("--security-only", action="store_true", 
                       help="Ex√©cuter seulement les v√©rifications de s√©curit√©")
    
    args = parser.parse_args()
    
    if args.tests_only:
        return run_tests()
    elif args.lint_only:
        run_linting()
        return 0
    elif args.security_only:
        run_security_check()
        return 0
    else:
        # Ex√©cuter tout
        test_result = run_tests()
        run_linting()
        run_security_check()
        
        print("\n" + "=" * 50)
        if test_result == 0:
            print("üéâ Tous les tests sont pass√©s!")
        else:
            print("‚ùå Certains tests ont √©chou√©")
        
        return test_result

if __name__ == "__main__":
    sys.exit(main())
